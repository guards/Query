
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;
import java.awt.Dialog;
import java.io.BufferedWriter;
import java.io.File;
import java.io.Writer;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author if4y
 */
public class Interface extends javax.swing.JFrame 
{

    /**
     * Creates new form Inteface
     */
    public Interface() throws SQLException
    {
        // ORDER START
          initComponents();
          resizeOrderTable();
          datelabel();
          initTableContent();
          showID();
          addListeners();
          summ();
        //ORDER EDNS
          
        //HISTORY START
          resizeHistoryTabe1();
          resizeHistoryTabe2();
        //HISTORY END
        
    }
 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        order = new javax.swing.JPanel();
        regNum = new javax.swing.JPanel();
        regNo = new javax.swing.JLabel();
        INVOICE = new javax.swing.JPanel();
        invGr = new javax.swing.JLabel();
        invEn = new javax.swing.JLabel();
        invSep = new javax.swing.JSeparator();
        invNo = new javax.swing.JLabel();
        DATE = new javax.swing.JPanel();
        dateGr = new javax.swing.JLabel();
        dateEn = new javax.swing.JLabel();
        dateSep = new javax.swing.JSeparator();
        curentDate = new javax.swing.JLabel();
        CASH = new javax.swing.JPanel();
        cashGr = new javax.swing.JLabel();
        cashEn = new javax.swing.JLabel();
        cashSep = new javax.swing.JSeparator();
        cash = new javax.swing.JCheckBox();
        CREDIT = new javax.swing.JPanel();
        creditGr = new javax.swing.JLabel();
        creditEn = new javax.swing.JLabel();
        creditSep = new javax.swing.JSeparator();
        credit = new javax.swing.JCheckBox();
        PERSON = new javax.swing.JPanel();
        personName = new javax.swing.JTextField();
        nameGr = new javax.swing.JLabel();
        nameEn = new javax.swing.JLabel();
        personAdress = new javax.swing.JTextField();
        adressGr = new javax.swing.JLabel();
        adressEn = new javax.swing.JLabel();
        personPhone = new javax.swing.JTextField();
        phoneGr = new javax.swing.JLabel();
        phoneEn = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        myTable = new javax.swing.JTable();
        claerTable = new javax.swing.JButton();
        addNewLineButton = new javax.swing.JButton();
        SIGNATURE = new javax.swing.JPanel();
        signature = new javax.swing.JLabel();
        TOTAL = new javax.swing.JPanel();
        goodValueGr = new javax.swing.JLabel();
        goodValueEn = new javax.swing.JLabel();
        goodValueSep = new javax.swing.JSeparator();
        vatGr = new javax.swing.JLabel();
        vatEn = new javax.swing.JLabel();
        vatProc = new javax.swing.JLabel();
        varSep = new javax.swing.JSeparator();
        totalGr = new javax.swing.JLabel();
        totalEn = new javax.swing.JLabel();
        euroSign = new javax.swing.JLabel();
        sumSep = new javax.swing.JSeparator();
        GoodsValue = new javax.swing.JLabel();
        VAT = new javax.swing.JLabel();
        TOTALSUM = new javax.swing.JLabel();
        history = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        historyTable1 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        historyTable2 = new javax.swing.JTable();
        MENU = new javax.swing.JMenuBar();
        New = new javax.swing.JMenu();
        Save = new javax.swing.JMenu();
        Print = new javax.swing.JMenu();
        About = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("INVOICE MAKER");
        setName("mainFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(500, 725));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        order.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        regNum.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        regNo.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        regNo.setText("Ap. ΕΓΓΡ. Φ.Π.Α.\\ V.A.T. Reg. No.");

        javax.swing.GroupLayout regNumLayout = new javax.swing.GroupLayout(regNum);
        regNum.setLayout(regNumLayout);
        regNumLayout.setHorizontalGroup(
            regNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(regNumLayout.createSequentialGroup()
                .addComponent(regNo)
                .addGap(0, 74, Short.MAX_VALUE))
        );
        regNumLayout.setVerticalGroup(
            regNumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, regNumLayout.createSequentialGroup()
                .addContainerGap(95, Short.MAX_VALUE)
                .addComponent(regNo))
        );

        order.add(regNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 10, 230, 110));

        INVOICE.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        INVOICE.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        invGr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        invGr.setText("ΑΡ.ΤΙΜΟΛΟΓΙΟΥ");
        INVOICE.add(invGr, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 4, -1, -1));

        invEn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        invEn.setText("Invoice No.");
        INVOICE.add(invEn, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 17, -1, -1));

        invSep.setOrientation(javax.swing.SwingConstants.VERTICAL);
        INVOICE.add(invSep, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 3, 34));

        invNo.setName("invNo"); // NOI18N
        INVOICE.add(invNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, -1, -1));
        invNo.getAccessibleContext().setAccessibleName("invNo");

        order.add(INVOICE, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 248, 35));

        DATE.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        DATE.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dateGr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        dateGr.setText("ΗΜΕΡΟΜΗΝΙΑ");
        DATE.add(dateGr, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 4, -1, -1));

        dateEn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        dateEn.setText("Date");
        DATE.add(dateEn, new org.netbeans.lib.awtextra.AbsoluteConstraints(78, 17, -1, -1));

        dateSep.setOrientation(javax.swing.SwingConstants.VERTICAL);
        DATE.add(dateSep, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 3, 34));

        curentDate.setText("curentDate");
        DATE.add(curentDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 9, -1, -1));

        order.add(DATE, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 48, 248, 35));

        CASH.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        CASH.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cashGr.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        cashGr.setText("ΤΟΙΣ ΜΕΤΡΗΤΟΙΣ");
        CASH.add(cashGr, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 4, -1, -1));

        cashEn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cashEn.setText("Cash");
        CASH.add(cashEn, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 17, -1, -1));

        cashSep.setOrientation(javax.swing.SwingConstants.VERTICAL);
        CASH.add(cashSep, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 0, 3, 34));
        CASH.add(cash, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 7, -1, -1));

        order.add(CASH, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 85, 123, 35));

        CREDIT.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        CREDIT.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        creditGr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        creditGr.setText("ΕΠΙ ΠΙΣΤΩΣΕΙ");
        CREDIT.add(creditGr, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 4, -1, -1));

        creditEn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        creditEn.setText("Credit");
        CREDIT.add(creditEn, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 17, -1, -1));

        creditSep.setOrientation(javax.swing.SwingConstants.VERTICAL);
        CREDIT.add(creditSep, new org.netbeans.lib.awtextra.AbsoluteConstraints(85, 0, 3, 34));
        CREDIT.add(credit, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 7, -1, -1));

        order.add(CREDIT, new org.netbeans.lib.awtextra.AbsoluteConstraints(365, 85, 123, 35));

        PERSON.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PERSON.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        personName.setName("personName"); // NOI18N
        PERSON.add(personName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 7, 400, 30));
        personName.getAccessibleContext().setAccessibleName("personName");

        nameGr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        nameGr.setText("ONOMA");
        PERSON.add(nameGr, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, -1));

        nameEn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        nameEn.setText("Name");
        PERSON.add(nameEn, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 20, -1, -1));

        personAdress.setName("personAdress"); // NOI18N
        PERSON.add(personAdress, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 45, 191, 30));
        personAdress.getAccessibleContext().setAccessibleName("personAdress");

        adressGr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        adressGr.setText("ΔΙΕΥΘΥΝΣΗ");
        PERSON.add(adressGr, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 50, -1, -1));

        adressEn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        adressEn.setText("Adress");
        PERSON.add(adressEn, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, -1, -1));

        personPhone.setName("personPhone"); // NOI18N
        PERSON.add(personPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(359, 45, 110, 30));
        personPhone.getAccessibleContext().setAccessibleName("personPhone");

        phoneGr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        phoneGr.setText("ΤΗΛΕΦΩΝΟ");
        PERSON.add(phoneGr, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 50, -1, -1));

        phoneEn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        phoneEn.setText("Telephone");
        PERSON.add(phoneEn, new org.netbeans.lib.awtextra.AbsoluteConstraints(308, 60, -1, -1));

        order.add(PERSON, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 125, 481, 83));

        myTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        myTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "#", "Product Name", "Kg", "€ per Kg", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        myTable.setName("myTable"); // NOI18N
        myTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(myTable);
        myTable.getColumnModel().getColumn(0).setResizable(false);
        myTable.getColumnModel().getColumn(0).setPreferredWidth(1);
        myTable.getColumnModel().getColumn(1).setResizable(false);
        myTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        myTable.getColumnModel().getColumn(2).setResizable(false);
        myTable.getColumnModel().getColumn(2).setPreferredWidth(5);
        myTable.getColumnModel().getColumn(3).setResizable(false);
        myTable.getColumnModel().getColumn(3).setPreferredWidth(2);
        myTable.getColumnModel().getColumn(4).setResizable(false);
        myTable.getColumnModel().getColumn(4).setPreferredWidth(5);
        myTable.getAccessibleContext().setAccessibleName("myTable");

        order.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 215, 485, 280));

        claerTable.setText("Clear Table");
        claerTable.setName("Clear Table"); // NOI18N
        claerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ClearTable(evt);
            }
        });
        order.add(claerTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 498, 140, -1));

        addNewLineButton.setText("Add New Line");
        addNewLineButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddNewLine(evt);
            }
        });
        order.add(addNewLineButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 498, 140, -1));

        SIGNATURE.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        signature.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        signature.setText("ΑΓΟΡΑΣΤΗΣ η ΠΑΡΑΛΗΠΤΗΣ / Buyer or Receiver");

        javax.swing.GroupLayout SIGNATURELayout = new javax.swing.GroupLayout(SIGNATURE);
        SIGNATURE.setLayout(SIGNATURELayout);
        SIGNATURELayout.setHorizontalGroup(
            SIGNATURELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SIGNATURELayout.createSequentialGroup()
                .addComponent(signature)
                .addGap(0, 64, Short.MAX_VALUE))
        );
        SIGNATURELayout.setVerticalGroup(
            SIGNATURELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SIGNATURELayout.createSequentialGroup()
                .addComponent(signature)
                .addGap(0, 95, Short.MAX_VALUE))
        );

        order.add(SIGNATURE, new org.netbeans.lib.awtextra.AbsoluteConstraints(7, 530, 285, 110));

        TOTAL.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        TOTAL.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        goodValueGr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        goodValueGr.setText("ΑΞΙΑ ΕΜΠΟΡΕΥΜΑΤΩΝ");
        TOTAL.add(goodValueGr, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 5, -1, -1));

        goodValueEn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        goodValueEn.setText("Goods Value");
        TOTAL.add(goodValueEn, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 18, -1, -1));
        TOTAL.add(goodValueSep, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 36, 189, 3));

        vatGr.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        vatGr.setText("Φ.Π.Α.");
        TOTAL.add(vatGr, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 42, -1, -1));

        vatEn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        vatEn.setText("V.A.T.");
        TOTAL.add(vatEn, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 55, -1, -1));

        vatProc.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        vatProc.setText("5%");
        TOTAL.add(vatProc, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 46, -1, -1));
        TOTAL.add(varSep, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 73, 189, 3));

        totalGr.setText("ΟΛΙΚΟ");
        TOTAL.add(totalGr, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 78, -1, -1));

        totalEn.setText("TOTAL");
        TOTAL.add(totalEn, new org.netbeans.lib.awtextra.AbsoluteConstraints(65, 90, -1, -1));

        euroSign.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        euroSign.setText("€");
        TOTAL.add(euroSign, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 80, -1, -1));

        sumSep.setOrientation(javax.swing.SwingConstants.VERTICAL);
        TOTAL.add(sumSep, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, -1, 109));

        GoodsValue.setName("GoodsValue"); // NOI18N
        TOTAL.add(GoodsValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 10, -1, -1));

        VAT.setName("vat"); // NOI18N
        TOTAL.add(VAT, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 48, -1, -1));
        VAT.getAccessibleContext().setAccessibleName("vat");

        TOTAL.add(TOTALSUM, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 85, -1, -1));

        order.add(TOTAL, new org.netbeans.lib.awtextra.AbsoluteConstraints(299, 530, 190, 110));

        jTabbedPane2.addTab("Order", order);

        history.setPreferredSize(new java.awt.Dimension(500, 700));
        history.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        historyTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "InvoiceNo.", "Buyer", "Address", "Phone", "PaymentType", "Date", "Price", "VAT", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        historyTable1.setName("historyTable1"); // NOI18N
        historyTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(historyTable1);
        historyTable1.getColumnModel().getColumn(0).setResizable(false);
        historyTable1.getColumnModel().getColumn(4).setResizable(false);
        historyTable1.getColumnModel().getColumn(6).setResizable(false);
        historyTable1.getColumnModel().getColumn(7).setResizable(false);
        historyTable1.getColumnModel().getColumn(8).setResizable(false);
        historyTable1.getAccessibleContext().setAccessibleName("historyTable1");

        history.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 10, 485, 180));

        historyTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product Name", "Amount", "€ per Kg.", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        historyTable2.setName("historyTable2"); // NOI18N
        jScrollPane3.setViewportView(historyTable2);
        historyTable2.getColumnModel().getColumn(0).setResizable(false);
        historyTable2.getColumnModel().getColumn(1).setResizable(false);
        historyTable2.getColumnModel().getColumn(2).setResizable(false);
        historyTable2.getColumnModel().getColumn(3).setResizable(false);
        historyTable2.getColumnModel().getColumn(4).setResizable(false);
        historyTable2.getAccessibleContext().setAccessibleName("historyTable2");

        history.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 200, 485, 440));

        jTabbedPane2.addTab("History", history);

        getContentPane().add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        New.setText("New");
        New.setName("CreatNew"); // NOI18N
        New.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                NewMouseClicked(evt);
            }
        });
        MENU.add(New);
        New.getAccessibleContext().setAccessibleName("CreatNew");

        Save.setText("Save");
        Save.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveOrder(evt);
            }
        });
        MENU.add(Save);

        Print.setText("Print");
        Print.setName("Print"); // NOI18N
        Print.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                print(evt);
            }
        });
        MENU.add(Print);

        About.setText("About");
        About.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showAbout(evt);
            }
        });
        MENU.add(About);

        setJMenuBar(MENU);

        getAccessibleContext().setAccessibleName("mainFrame");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewMouseClicked
            personName.setText("");
            personAdress.setText("");
            personPhone.setText("");
            
            DefaultTableModel model = (DefaultTableModel) myTable.getModel();
            model.setRowCount(0);
            model.setRowCount(1);
            GoodsValue.setText("0,00");
            VAT.setText("0,00");
            TOTALSUM.setText("0.00");
            cash.setSelected(false);
            credit.setSelected(false);
            showID();
       
        
    }//GEN-LAST:event_NewMouseClicked

    private void AddNewLine(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddNewLine
        
        DefaultTableModel model = (DefaultTableModel) myTable.getModel();
        model.setRowCount(model.getRowCount()+1);
        showID();
        
    }//GEN-LAST:event_AddNewLine

    private void ClearTable(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ClearTable

        JFrame tempFrame = new JFrame();
        int dialogResult = JOptionPane.showConfirmDialog(tempFrame,
    "Erase table content?",
    "Warrning!!!",
    JOptionPane.YES_NO_OPTION);
        if(dialogResult == JOptionPane.YES_OPTION)
        {
            DefaultTableModel model = (DefaultTableModel) myTable.getModel();
            model.setRowCount(0);
            model.setRowCount(1);
            GoodsValue.setText("");
            VAT.setText("");
            TOTALSUM.setText("");
        }
        showID();
    }//GEN-LAST:event_ClearTable

    private void saveOrder(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveOrder
        try {
            //System.out.println("EXEC QUERY");
            DefaultTableModel tm = (DefaultTableModel)myTable.getModel();
            Connection con = dbConnection();
            //save order
            String paymentType;
            if(cash.isSelected()){
                paymentType = "cash";
            }else{
                paymentType = "credit";
            }
            String pName = personName.getText();
            String pAddres = personAdress.getText();
            String pPhone = personPhone.getText();
            String gVal = GoodsValue.getText();
            if( (gVal.compareTo("0,00") != 0) && (pName.compareTo("") != 0) && (pAddres.compareTo("") != 0) && (pPhone.compareTo("") != 0))
            {
                String query = "INSERT INTO `order` (`id`,`name`,`adress`,`phone`,`paymentType`,`total`,`vat`,`total_sum`) "
                        + "VALUES ('" + invNo.getText() + "', "
                        + "'" + pName + "', "
                        + "'" + pAddres + "', "
                        + "'" + pPhone + "', "
                        + "'" + paymentType + "', "
                        + "'" + gVal + "', "
                        + "'" + VAT.getText() + "', "
                        + "'" + TOTALSUM.getText() + "')";
                Statement st = (Statement) con.createStatement();
                
                st.executeUpdate(query);
                //END OF SAVE ORDER
                for(int i = 0; i < tm.getRowCount(); i++)
                {
                    Object prName = tm.getValueAt(i, 1);
                    Object kg = tm.getValueAt(i, 2);
                    Object pricePerUnit = tm.getValueAt(i, 3);
                    Object total = tm.getValueAt(i, 4);
                    if(prName != null && kg != null && pricePerUnit != null)
                        System.out.println("is null");
                    else
                        System.out.println("is not null");
                    if(prName != null && kg != null && pricePerUnit != null)
                    {
                        System.out.println("passed the check");
                        query = "INSERT INTO `product` (`name`,`amount`,`price`,`total`,`order_id`) "
                            + "VALUES ('" + prName + "', "
                            + "'" + kg + "', "
                            + "'" + pricePerUnit + "', "
                            + "'" + total + "', "
                            + "'" + invNo.getText() + "')";
                        st = (Statement) con.createStatement();
                        st.executeUpdate(query);
                        System.out.println("after query");
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         try {
            initTableContent();
        } catch (SQLException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_saveOrder

    private void showAbout(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showAbout
        JOptionPane.showMessageDialog(this,
    "Version 1.0 Build 1001 \n© Invoice Maker 2012 - 2013 g.\nAll rights reserved.\nCreated by GuardsTeam");
    }//GEN-LAST:event_showAbout

    private void print(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_print
        FileWriter fstream = null;
        
        try {
            for(int i = 0 ; i<100; i++);
            //fstream = new FileWriter("D:/out.txt");
            fstream = new FileWriter( "D:/test/" + invNo.getText()+ ".txt" );
            BufferedWriter out = new BufferedWriter(fstream);
            out.write("\r\n" + "Invoice Number: " + invNo.getText() +"\r\n" );
            out.write("Date: " + curentDate.getText() +"\r\n" );
            out.write("Buyer Name: " + personName.getText() +"\r\n" );
            out.write("Buyer Adress: " + personAdress.getText() +"\r\n" );
            out.write("Buyer Phone: " + personPhone.getText() +"\r\n" +"\r\n" );
            out.write( "# |" + "Product name   |" + "Kg |" + "€ per Kg   |" + "Price" +"\r\n");
            
            for ( int i =0 ;i < myTable.getRowCount(); i++ )
            {
                out.write(
                        myTable.getValueAt(i,0)+ " "
                        + myTable.getValueAt(i,1) + "   "
                        + myTable.getValueAt(i,2) + "   "
                        + myTable.getValueAt(i,3) + "   "
                        + myTable.getValueAt(i,4) + "   "
                        +"\r\n" );
            }
            out.write("\r\n" + "Goods Value: " + GoodsValue.getText() +"\r\n" );
            out.write("V.A.T: " + VAT.getText() +"\r\n" );
            out.write("TOTAL: " + TOTALSUM.getText() +"\r\n" );
            
            out.close();
            
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fstream.close();
            } catch (IOException ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_print

    private void addListeners() 
    {
        //myTable LISTENER
        myTable.getModel().addTableModelListener(new TableModelListener() 
        {
            public void tableChanged(TableModelEvent e) 
            {
                int col = e.getColumn();
                int row = e.getFirstRow();
                if( col == 2 || col == 3  )
                {
                   Object colVal = myTable.getValueAt( row, col );
                   if(col == 2)
                   {
                       Object colVal3 = myTable.getValueAt(row, 3);
                       if (colVal3 != null)
                       {
                           Object sum = Double.parseDouble(colVal.toString()) * Double.parseDouble(colVal3.toString());
                           myTable.setValueAt(sum, row, 4);
                           summ();
                       }
                   }
                   else
                   {
                       Object colVal2 = myTable.getValueAt(row, 2);
                       if (colVal2 != null)
                       {
                           Object sum = Double.parseDouble(colVal.toString()) * Double.parseDouble(colVal2.toString());
                           myTable.setValueAt(sum, row, 4);
                           summ();
                       }
                   }
                }
            }
        });
        
        //History LISTENER
        historyTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() 
        {
            @Override
            public void valueChanged(ListSelectionEvent lse)
            {
                updateProducts();
            }

            private void updateProducts() 
            {
                try {
                    Connection con = dbConnection();
                    int row = historyTable1.getSelectedRow();
                    Object id = historyTable1.getValueAt(row, 0);
                    String query = "SELECT * FROM `product` WHERE order_id="+id.toString();
                    Statement st = (Statement) con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    //LOAD HISTORY_TABLE_2
                    DefaultTableModel tableModel = (DefaultTableModel)historyTable2.getModel();
                    tableModel.setRowCount(0);
                    int i = 0;
                    while(rs.next())
                    {
                        i++;
                        tableModel.addRow(new Object[]
                        {
                            i,rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5)
                        });
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                }
            
            
            }
        });
        
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Interface().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu About;
    private javax.swing.JPanel CASH;
    private javax.swing.JPanel CREDIT;
    private javax.swing.JPanel DATE;
    private javax.swing.JLabel GoodsValue;
    private javax.swing.JPanel INVOICE;
    private javax.swing.JMenuBar MENU;
    private javax.swing.JMenu New;
    private javax.swing.JPanel PERSON;
    private javax.swing.JMenu Print;
    private javax.swing.JPanel SIGNATURE;
    private javax.swing.JMenu Save;
    private javax.swing.JPanel TOTAL;
    private javax.swing.JLabel TOTALSUM;
    private javax.swing.JLabel VAT;
    private javax.swing.JButton addNewLineButton;
    private javax.swing.JLabel adressEn;
    private javax.swing.JLabel adressGr;
    private javax.swing.JCheckBox cash;
    private javax.swing.JLabel cashEn;
    private javax.swing.JLabel cashGr;
    private javax.swing.JSeparator cashSep;
    private javax.swing.JButton claerTable;
    private javax.swing.JCheckBox credit;
    private javax.swing.JLabel creditEn;
    private javax.swing.JLabel creditGr;
    private javax.swing.JSeparator creditSep;
    private javax.swing.JLabel curentDate;
    private javax.swing.JLabel dateEn;
    private javax.swing.JLabel dateGr;
    private javax.swing.JSeparator dateSep;
    private javax.swing.JLabel euroSign;
    private javax.swing.JLabel goodValueEn;
    private javax.swing.JLabel goodValueGr;
    private javax.swing.JSeparator goodValueSep;
    private javax.swing.JPanel history;
    private javax.swing.JTable historyTable1;
    private javax.swing.JTable historyTable2;
    private javax.swing.JLabel invEn;
    private javax.swing.JLabel invGr;
    private javax.swing.JLabel invNo;
    private javax.swing.JSeparator invSep;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable myTable;
    private javax.swing.JLabel nameEn;
    private javax.swing.JLabel nameGr;
    private javax.swing.JPanel order;
    private javax.swing.JTextField personAdress;
    private javax.swing.JTextField personName;
    private javax.swing.JTextField personPhone;
    private javax.swing.JLabel phoneEn;
    private javax.swing.JLabel phoneGr;
    private javax.swing.JLabel regNo;
    private javax.swing.JPanel regNum;
    private javax.swing.JLabel signature;
    private javax.swing.JSeparator sumSep;
    private javax.swing.JLabel totalEn;
    private javax.swing.JLabel totalGr;
    private javax.swing.JSeparator varSep;
    private javax.swing.JLabel vatEn;
    private javax.swing.JLabel vatGr;
    private javax.swing.JLabel vatProc;
    // End of variables declaration//GEN-END:variables

    
    //############################ORDER START#########################
    //-------------------------SET COLOMN WIDTH IN TABLE -------------
    private void resizeOrderTable()
    {
        myTable.setAutoResizeMode(myTable.AUTO_RESIZE_OFF);
        myTable.getColumnModel().getColumn(0).setPreferredWidth(30);
        myTable.getColumnModel().getColumn(1).setPreferredWidth(239);
        myTable.getColumnModel().getColumn(2).setPreferredWidth(60);
        myTable.getColumnModel().getColumn(3).setPreferredWidth(70);
        myTable.getColumnModel().getColumn(4).setPreferredWidth(80);
    }
    //----------------------------END OF SETING WIDTH-----------------
    
    //----------------------------SHOW CURENT TIME -------------------
    private void datelabel() 
    {
       DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
       Date date = new Date();
       //System.out.println(dateFormat.format(date));
  
       curentDate.setText( dateFormat.format(date) );
     
    }
    //----------------------END OF SHOWING CURENT TIME----------------
    
    //------------------------CONNECT TO DATABASE---------------------
    private Connection dbConnection() throws SQLException 
    {
        String username = "root";
        String password = "";
        String dbLocal = "localhost";
        String dbName = "invoicemaker";
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
        }
        catch(ClassNotFoundException e)
        {
            e.printStackTrace();
        }
        String host = "jdbc:mysql://" + dbLocal + "/" + dbName;
        Connection con = DriverManager.getConnection(host, username, password);
        return con;
    }
    //---------------------------END CONNECTION-----------------------
    
    //---------------------SHOW TABLE ID OF EACH ROW------------------
    private void showID() 
    {
        for ( int i =0 ;i < myTable.getRowCount(); i++ )
        {
            myTable.setValueAt( i+1, i, 0);
        }
    }
    //---------------------------END SHOWING--------------------------
    
    //-------------------------- TOTAL SUM----------------------------
    private void summ() 
    {
        double sum = 0;
        for(int i=0; i < myTable.getRowCount(); i++)
        {
            Object tempObj = myTable.getValueAt(i, 4);
            if(tempObj != null)
            {
                String stringVal = tempObj.toString();
                if(stringVal.compareTo("") != 0){
                    double doubleVal = Double.parseDouble(stringVal);
                    sum = sum + doubleVal;
                }
            }
        }
        
        //calculating total
        double T = sum*1.20;
        //calculating vat only
        double V = sum*0.2;
        
        //convert from double to string for goodsvalue
	String s = String.format("%1$,.2f",sum);
        GoodsValue.setText( s );
        
        //conver from double to string for vat
        String WAT = String.format("%1$,.2f",V);
        VAT.setText(WAT);
        
        //conver from double to string for total
        String TS = String.format("%1$,.2f",T);
        TOTALSUM.setText(TS);
    }
    //-------------------------END TOTAL SUM--------------------------

    private void initTableContent() throws SQLException 
    {
        try 
        {
            //LOAD INVOICE NUMBER
            Connection con = dbConnection();
            String query = "SELECT MAX(id) FROM `order`";
            Statement st = (Statement) con.createStatement();
            ResultSet rs = st.executeQuery(query);
            rs.next();
            int invN = rs.getInt(1)+1;
            invNo.setText( String.valueOf(invN) );
            //LOAD HISTORY_TABLE_1
            query = "SELECT * FROM `order`";
            st = (Statement) con.createStatement();
            rs = st.executeQuery(query);
            DefaultTableModel tableModel = (DefaultTableModel)historyTable1.getModel();
            tableModel.setRowCount(0);
            while(rs.next())
            {
                tableModel.addRow(new Object[]
                {
                    rs.getString(1),rs.getString(2),rs.getString(3)
                   ,rs.getString(4),rs.getString(5),rs.getString(6)
                   ,rs.getString(7),rs.getString(8),rs.getString(9)
                });
            }
            
            
        } catch (SQLException ex) 
        {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //###########################ORDER END############################
    
    //#########################HISTORY START##########################
    //---------------SET COLOMN WIDTH IN HISTORY_TABLE_1 -------------
    private void resizeHistoryTabe1() 
    {
        historyTable1.setAutoResizeMode(myTable.AUTO_RESIZE_OFF);
        historyTable1.getColumnModel().getColumn(0).setPreferredWidth(70);
        historyTable1.getColumnModel().getColumn(1).setPreferredWidth(120);
        historyTable1.getColumnModel().getColumn(2).setPreferredWidth(90);
        historyTable1.getColumnModel().getColumn(3).setPreferredWidth(50);
        historyTable1.getColumnModel().getColumn(4).setPreferredWidth(90);
        historyTable1.getColumnModel().getColumn(5).setPreferredWidth(70);
        historyTable1.getColumnModel().getColumn(6).setPreferredWidth(65);
        historyTable1.getColumnModel().getColumn(7).setPreferredWidth(60);
        historyTable1.getColumnModel().getColumn(8).setPreferredWidth(65);
       
    }
    //---------------END COLOMN WIDTH IN HISTORY_TABLE_1 -------------
     
    //---------------SET COLOMN WIDTH IN HISTORY_TABLE_2 -------------
    private void resizeHistoryTabe2() 
    {
        historyTable2.setAutoResizeMode(myTable.AUTO_RESIZE_OFF);
        historyTable2.getColumnModel().getColumn(0).setPreferredWidth(30);
        historyTable2.getColumnModel().getColumn(1).setPreferredWidth(239);
        historyTable2.getColumnModel().getColumn(2).setPreferredWidth(60);
        historyTable2.getColumnModel().getColumn(3).setPreferredWidth(70);
        historyTable2.getColumnModel().getColumn(4).setPreferredWidth(80);
    }
    //---------------END COLOMN WIDTH IN HISTORY_TABLE_2 -------------
     //#########################HISTORY ENDS###########################

   
    
}